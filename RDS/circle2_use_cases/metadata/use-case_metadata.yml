openapi: 3.0.0
paths:
  /jsonschema:
    get:
      summary: Get jsonschema
      tags: []
      responses:
        '200':
          description: 'Responds with the jsonschema of datacite kernel 4.3 '
          content:
            application/json:
              schema:
                type: object
                properties:
                  kernelversion:
                    type: string
                  schema:
                    type: string
      operationId: ''
      description: |-
        Returns the used jsonschema.
        Currently this is datacite kernel 4.3

        https://raw.githubusercontent.com/datacite/schema/master/source/json/kernel-4.3/datacite_4.3_schema.json
  '/user/{user-id}/project/{project-index}':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        required: true
      - schema:
          type: string
        name: project-index
        in: path
        required: true
    get:
      summary: Get the corresponding projectId
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  projectId:
                    type: integer
<<<<<<< HEAD
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
=======
>>>>>>> master
      operationId: api.UserProject.get
      description: This endpoint returns the projectId for the given user and the index of project. This is an endpoint for convenience.
  '/project/{project-id}':
    parameters:
      - schema:
          type: string
        name: project-id
        in: path
        required: true
    get:
      summary: Get all metadata from given project
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
      operationId: ''
      description: ''
    patch:
      summary: Modify a project
      operationId: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: 'This will returns only the updated fields, because this service redirects only the output from ports.'
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/Property'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
        description: 'You only need to specify the dict fields, which you wants to update.'
info:
  version: '1.0'
  title: Metadata Service
  description: This service is responsible for any metadata functionality to get and update all metadata through the ports. This is a convenient way to interact with the metadata from the ports.
  contact:
    name: Peter Heiss
    url: 'https://www.research-data-services.org'
    email: peter.heiss@uni-muenster.de
servers:
  - url: 'http://use-case_metadata:3000/metadata'
    description: ''
components:
  schemas:
    Property:
      title: Metadata Service Property
      description: |-
        Custom RDS Model.

        This model describes a property of the datacite scheme. View the example to see more.
        With this model it should be possible to redirect the request to an datacite-compatible endpoint.

        The model has to be datacite kernel 4.3 valid.
        https://raw.githubusercontent.com/datacite/schema/master/source/json/kernel-4.3/datacite_4.3_schema.json
      type: object
      properties:
        port:
          type: string
          description: 'This field is used by the response from the metadata service to describe, which ports returned which metadata. The UI has to work with this informations.'
        metadata:
          anyOf:
            - properties:
                Creators:
                  type: array
                  items:
                    $ref: '#/components/schemas/Creator'
              required:
                - Creators
            - properties:
                Titles:
                  type: array
                  items:
                    $ref: '#/components/schemas/Title'
              required:
                - Titles
            - properties:
                Identifiers:
                  type: array
                  items:
                    $ref: '#/components/schemas/Identifier'
              required:
                - Identifiers
            - properties:
                Publisher:
                  $ref: '#/components/schemas/Publisher'
              required:
                - Publisher
            - properties:
                SchemaVersion:
                  $ref: '#/components/schemas/SchemaVersion'
              required:
                - SchemaVersion
            - properties:
                Type:
                  $ref: '#/components/schemas/Type'
              required:
                - Type
          type: object
    Title:
      title: Title
      description: |-
        A name or title by which a resource is known. May be the title of a dataset or the name of a piece of software.

        Free Text
      x-examples:
        example-1:
          text: Example Test
          type: Subtitle
      type: object
      properties:
        title:
          type: string
        lang:
          type: string
    SchemaVersion:
      title: SchemaVersion
      x-examples:
        example-1:
          scheme: 'http://datacite.org/schema/kernel-4'
      description: Constant schema version
      type: object
      properties:
        schemaVersion:
          type: string
          description: 'Constant: "http://datacite.org/schema/kernel-4"'
    PublicationYear:
      title: PublicationYear
      description: |-
        The year when the data was or will be made publicly available.  In the case of resources such as software or dynamic data where there may be multiple releases in one year, include the Date/dateType/dateInformation property and sub-properties to provide more information about the publication or release date details.

        Example:
        YYYY
        ***

        If an embargo period has been in effect, use the date when the embargo period ends.In the case of datasets, "publish" is understood to mean making the data available on a specific date to the community of researchers.If there is no standard publication year value, use the date that would be preferred from a citation perspective
      type: object
      properties:
        PublicationYear:
          type: string
    Publisher:
      title: Publisher
      description: "The name of the entitythat holds, archives, publishes prints, distributes, releases, issues, or produces the resource. This property will be used to formulate the citation, so consider the prominence of the role. For software, use Publisher for the code repository. If there is an entity other than a code repository, that \"holds, archives, publishes, prints, distributes, releases, issues, or produces\" the code, use the property Contributor/contributorType/hosting Institution for the code repository.\n\nExamples: World Data Center for Climate (WDCC); GeoForschungsZentrum Potsdam (GFZ); Geological Institute, University of Tokyo, GitHub "
      type: object
      properties:
        publisher:
          type: string
    Type:
      title: Type
      description: A description of the resource.
      type: object
      properties:
        resourceType:
          type: string
          description: |-
            The format is open, but the preferred format is a singleterm of some detail so that a pair can be formed with the sub-property.Text formats can be free-text OR terms from the CASRAI Publications resource type list.17

            ***
            Examples: Dataset/Census Data, where 'Dataset' is resourceTypeGeneral value and 'Census Data' is ResourceType value. Text/Conference Abstract, where 'Text' is resourceTypeGeneral value and 'Conference Abstract' is resourceType value aligned with CASRAI Publications term.
        resourceTypeGeneral:
          type: string
          description: |-
            The general type of a resource.

            Controlled List Values:
            Audiovisual
            Collection
            Data
            Paper
            Dataset
            Event
            Image
            InteractiveResource
            Model
            Physical
            Object
            Service
            Software
            Sound
            Text
            Workflow
              Other
    Identifier:
      title: Identifier
      description: 'The Identifier is a unique string that identifies a resource.  For software, determine whether the identifier is for a specific version of a piece of software, (per the Force11 Software Citation Principles11), or for all versions.'
      anyOf:
        - properties:
            identifier:
              type: string
            identifierType:
              type: string
      type: object
    Creator:
      title: Creator
      description: |-
        The main researchers involved in producing the data, or the authors of the publication, in priority order. To supply multiple creators, repeat this property.

        May be a corporate/institutional or personal name. Note: DataCite infrastructure supports up to 8000-10000 names. For name lists above that size, consider attribution via linking to the related metadata.
      type: object
      properties:
        name:
          type: string
          description: The full name of the creator.
        nameType:
          type: string
          description: |-
            Controlled List Values:
            Organizational
            Personal(default)
        familyName:
          type: string
          description: The surname or last name of the creator.
        givenName:
          type: string
          description: The personal or first name of the creator.
      required:
        - name
        - nameType
        - familyName
        - givenName
