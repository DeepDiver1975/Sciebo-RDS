openapi: 3.0.0
info:
  title: Interface for Ports used as metadata storage
  version: '1.0'
  contact:
    name: Peter Heiss
    email: peter.heiss@uni-muenster.de
  description: |-
    This api describes the metadata endpoints, which have to be implemented by all ports in the rds system, so the system is enabled to retrieve and set metadata from all different plattforms without knowing them.

    You can imagine, that this api is like an interface that every port has to implement it.

    All endpoints, which are described here, represents the required fields from datacite data scheme. So you can implement more endpoints in your port to support more fields, but this is required to work within rds system as a metadata port.
servers:
  - url: 'http://port:3000/metadata'
paths:
  '/project/{project-id}':
    parameters:
      - schema:
          type: string
        name: project-id
        in: path
        required: true
    get:
      summary: Get all metadata
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
              examples:
                example-1:
                  value:
                    titles:
                      - title: long title
                        lang: en
                    publisher: research publisher gmbh
                    type:
                      resourceType: ''
                      resourceTypeGeneral: Poster
      description: "Take a look at the datacite specification (https://raw.githubusercontent.com/datacite/schema/master/source/json/kernel-4.3/datacite_4.3_schema.json) for all useable keywords. \n\nSee the examples to see, how to use it."
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                - type: 'null'
            examples:
              example-1:
                value:
                  titles: ''
                  publisher: ''
                  type: ''
    delete:
      summary: Remove a project from this service
      responses:
        '200':
          description: OK
    patch:
      summary: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties: {}
              examples:
                example-1:
                  value:
                    titles:
                      - title: long title
                        lang: en
                    publisher: research publisher gmbh
                    type:
                      resourceType: ''
                      resourceTypeGeneral: Poster
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
            examples:
              example-1:
                value:
                  titles:
                    - title: long title
                      lang: en
                  publisher: research publisher gmbh
                  type:
                    resourceType: ''
                    resourceTypeGeneral: Poster
        description: The given body has to be valid against the datacite jsonschema (without required fields).
  '/project/{project-id}/files':
    parameters:
      - schema:
          type: string
        name: project-id
        in: path
        required: true
    get:
      summary: Get all files
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
    post:
      summary: Add a file
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/File'
  '/project/{project-id}/files/{file-id}':
    parameters:
      - schema:
          type: string
        name: project-id
        in: path
        required: true
      - schema:
          type: string
        name: file-id
        in: path
        required: true
    get:
      summary: Get specified file
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
      description: ''
    patch:
      summary: ''
      responses:
        '200':
          description: OK
  /project:
    get:
      summary: Returns all projects available in the corresponding service
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
              examples: {}
    parameters: []
    post:
      summary: Add a new project to the service
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                projectName:
                  type: string
components:
  schemas:
    File:
      title: File
      type: object
      properties:
        id:
          type: string
        filename:
          type: string
        content:
          type: string
    Project:
      title: Project
      type: object
      properties:
        projectId:
          type: string
        projectName:
          type: string
      description: 'Represents a project in the service, which will be connected through the implementation of this port.'
  securitySchemes:
    oauth-key:
      type: oauth2
      flows:
        password:
          tokenUrl: ''
          refreshUrl: ''
          scopes: {}
      description: ''
