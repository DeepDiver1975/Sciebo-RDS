info:
  title: Central Service - Token Storage
  version: '1.0'
  contact:
    name: Peter Heiss
    email: peter.heiss@uni-muenster.de
    url: 'http://www.research-data-services.org'
  description: 'This file describes the interface for the central service "token storage".'
  license:
    name: MIT
servers:
  - url: 'http://central-service_token-storage:3000'
paths:
  /token:
    get:
      summary: Returns all tokens
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/Token'
      description: Returns an unfiltered list of all tokens.
      tags:
        - Token
    post:
      summary: Add a token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '400':
          description: Bad Request
      description: Adds a token to repository.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/User'
                token:
                  $ref: '#/components/schemas/Token'
        description: ''
      tags:
        - token
  /user:
    get:
      summary: Returns user informations
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
      description: Returns informations from main oauth2-provider
    parameters: []
    post:
      summary: Adds a new user
      operationId: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Adds a new user to the storage.
      tags:
        - User
      description: Adds a new user.
  '/user/{user-id}':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        required: true
    get:
      summary: Get user with id
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
      description: Returns the user with specified id.
    delete:
      summary: Remove user
      operationId: ''
      responses:
        '200':
          description: OK
      tags:
        - User
      description: Delete the user with user-id.
  '/token/{token-id}':
    get:
      summary: Get specified token
      tags:
        - token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '404':
          description: Not Found
      description: Returns the specified token.
    parameters:
      - schema:
          type: string
        name: token-id
        in: path
        required: true
    put:
      summary: Update token
      responses:
        '200':
          description: OK
      description: Updates a token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Token'
      tags:
        - token
  '/user/{user-id}/token':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        required: true
    get:
      summary: Get tokens from specified user
      tags:
        - User
        - token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  length:
                    type: integer
                  list:
                    $ref: '#/components/schemas/Token'
      description: Returns all tokens for the specified user.
    post:
      summary: Add a token
      operationId: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
      description: Adds token to the repository.
      tags:
        - User
        - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Token'
  '/service/{servicename}':
    get:
      summary: Get specified service
      tags:
        - Service
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
      description: Returns the specified service.
    parameters:
      - schema:
          type: string
        name: servicename
        in: path
        required: true
  /service:
    get:
      summary: Returns all services
      tags:
        - Service
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/JSONService'
      operationId: ''
      description: Returns all registered services.
    post:
      summary: Adds a new service
      operationId: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '400':
          description: Bad Request
      tags:
        - Service
      description: Adds a new service to storage.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JSONService'
        description: ''
  '/user/{user-id}/token/{token-id}':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        required: true
      - schema:
          type: string
        name: token-id
        in: path
        required: true
    get:
      summary: Returns the specified token
      tags:
        - User
        - token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '404':
          description: Not Found
      operationId: ''
      description: Returns the specified token from the specified user.
    delete:
      summary: Remove token
      operationId: ''
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '404':
          description: Not Found
      tags:
        - token
      description: Deletes the specified token from the specified user.
components:
  schemas:
    Token:
      title: Token
      type: object
      properties:
        servicename:
          type: string
        access_token:
          type: string
          description: 'The token, which can be used as password for username in service.'
      x-tags:
        - token
    User:
      title: User
      type: object
      properties:
        username:
          type: string
      x-tags:
        - User
    Service:
      title: Service
      type: object
      x-tags:
        - Service
      properties:
        servicename:
          type: string
    JSONService:
      title: JSONService
      type: object
      properties:
        type:
          type: string
        data:
          anyOf:
            - $ref: '#/components/schemas/OAuthService'
            - $ref: '#/components/schemas/Service'
    OAuthService:
      title: OAuthService
      type: object
      properties:
        servicename:
          type: string
        authorize_url:
          type: string
        refresh_url:
          type: string
        client_id:
          type: string
        client_secret:
          type: string
tags:
  - name: User
    description: All user related objects.
  - name: token
    description: All token related objects.
  - name: Service
    description: All service related objects.
openapi: 3.0.0
